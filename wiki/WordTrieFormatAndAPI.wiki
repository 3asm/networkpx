#summary (Technical) The format of the WordTrie binary files and the API to access them.
#labels Phase-Implementation

<wiki:toc/>

= Format =

The !WordTrie consist of 2 files, the index file (.idx) and word file (.dat).

All numbers in a !WordTrie are in *big endian*.

== Magic Number ==

The first 4 bytes of each file must be `00-00-00-01`. This is checked in `KB::WordTrie::magic_number_ok`.

== Word file (.dat) ==

=== Word Count ===

The number of words stored in this file is at 0x1C.

=== Word Entry ===

Each entry must have a 4-byte metadata:
{{{
struct {
 struct {
   unsigned size:5;
   unsigned length:5;
   unsigned sort_key_length:5;
 };
 unsigned char word_m_40;
 char flags;
};
}}}

{{{
flags
=====
   1 : Long-Capitalization-Flag.
   2 :
   4 :
   8 :
0x10 :
0x20 :
0x40 : Long-0x4C-Flag.
0x80 : Return-Raw-Data.
}}}

If the `Long-Capitalization-Flag` flag is set, an unsigned (32-bit) int will be read and used as the capitalization flag instead of `flags`. The capitalization field is used to give a proper capitalization in auto-correction. For example, the entry for _applecare_ has capitalization flag 0x21, which means the first (0x1) and sixth (0x20) letters should be capitalized.

If `Long-0x4C-Flag` is set, another unsigned int will be read and stored in `m_4c`, otherwise `flags` will be used instead.

If `Return-Raw-Data` is set, the raw data in the Words file will be returned when calling `KB::WordTrie::word_at`. Otherwise a NULL pointer is returned.

The null-terminated string following is the word entry. A word entry is usually _not_ aligned.

= API =

You can use the `WordTrie` C++ class in the UIKit framework to access !WordTries.