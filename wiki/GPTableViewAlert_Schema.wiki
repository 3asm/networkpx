{{{

struct GPTableViewAlert {
  array<Button> buttons = ({});  // Buttons of the alert. Requires at least 1 button. 
  string title;                                // Alert title.
  bool backButton = false;                     // Whether to show the "back" button.
  array<Entry> entries;                        // Table entries.
};

union Button {
  struct {
    string label = "OK"; // Label of the button.
    string id = label;      // Identifier of the button.
  };
  string;         // Use this string as label.
};

union Entry {
 struct {
  bool header = false;        // Whether to treat this entry as a section header.
  string title;               // Entry title.
  string id = title;          // Identifier of this entry. Should be unique.
  Icon icon = null :: header == false;           // Icon of the entry.
  bool reorder = false :: header == false && accessory == null;       // Whether to display the reorder control for this row.
  enum{Add,Delete} action = null :: header == false; // Display a "+" or "-" sign.
  string(html) description = null :: header == false;    // HTML description.
  bool edit = false :: header == false;   // Make the description as an editing text view.
  bool atBegin = false :: header == false && textview == true; // Place the cursor at the beginning or end.
  Accessory accessory = null :: header == false && reorder == false; // accessory
  array<Button> buttons = null :: header == false;        // Buttons associated with this entry.
 };
 string;                     // Just the title.
};

union Icon {
  data(image);                       // Icon as image.
  string(bundleID);                  // Icon with display identifier
  string(regex/^[\uE000-\uE5FF]$/);  // Emoji icon.
};

union Accessory {
  enum {
    Checkmark,
    DisclosureIndicator,
    DisclosureButton,
    InfoButton,
    ContactAddButton,
    Switch
  };                    // Standard accessories
  Icon;                 // an image as a button.
};

}}}

When a button is clicked, the following method will be called:
{{{
-(BOOL)tableViewAlert:(GPTableViewAlert*)alert buttonClicked:(NSString*)identifier forItem:(NSString*)item;
}}}
return `YES` if you want to keep the alert view on screen. `item` is nil if it's a button from the alert view instead of an item. `identifier` is `@"__BACK__"` if the back button is tapped.

When two entries are rearranged, the following method will be called:
{{{
-(void)tableViewAlert:(GPTableViewAlert*)alert movedItem:(NSString*)targetID below:(NSString*)belowID;
}}}
If the item is moved to the top, `belowID` will be `nil`. 

When an editing control (+ or -) is pressed, the following method will be called:
{{{
-(void)tableViewAlert:(GPTableViewAlert*)alert editedWithAction:(UITableViewCellEditingStyle)action forItem:(NSString*)item atLevel:(unsigned)level;
}}}

When a leaf entry is tapped, the following method will be called:
{{{
-(void)tableViewAlert:(GPTableViewAlert*)alert touchedItem:(NSString*)item atLevel:(unsigned)level;
}}}

You can display a GPTableViewAlert using:
{{{
NSDictionary* alertSpec = ...;
GPTableViewAlert* alert = [GPTableViewAlert showAlertWithDictionary:alertSpec delegate:self];
}}}
and request to update the view using:
{{{
NSString* animationType = kCATransitionPush;
NSString* animationSubtype = kCATransitionFromRight;
[alert updateToDictionary:alertSpec2 withAnimationType:animationType subtype:animationSubtype];
}}}
The `buttons` in this the dictionary of this method will be ignored.